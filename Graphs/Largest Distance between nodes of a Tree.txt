pair<int , int > bfs(vector<vector<int > > g,int s,int gs){
    int dis[gs];
    memset(dis,-1,sizeof(dis));
    
    queue <int> q;
    q.push(s);
    dis[s]=0;
    while(!q.empty())
    {
        int u= q.front();
        q.pop();
        vector<int > :: iterator it;
        for(it=g[u].begin();it!=g[u].end();it++){
            //cout<<"\nthis node is : "<<(*it);
            int v = *it;
            if(dis[v]==-1){
                q.push(v);
                dis[v] = dis[u] + 1;
            }
        }
    }
    int max=0;
    int indx=0;
    for(int i=0;i<gs;i++){
        if(dis[i]>max){
            max=dis[i];
            indx = i;
        }
    }
    
    return make_pair(indx,max);
}
int Solution::solve(vector<int> &A) {
    int n = A.size();
    if(n==0||n==1)return 0 ;
    if(n==2) return 1;
    vector<vector<int > > graph(n);
    int root;
    vector<int > list;
    for(int i=0;i<n;i++){
        if(A[i]!=-1){
            graph[A[i]].push_back(i);  
                graph[i].push_back(A[i]);  
          // cout<<"Here while cons: " <<graph[A[i]][i]<<endl;
        }else{
            root=i;
        }
    }
    
    pair<int , int > t1,t2;
    t1 = bfs(graph,root,n);
    //cout<<endl<<t1.second<<endl;
    t2 = bfs(graph,t1.first,n);
    
    return t2.second;
    
    
    
}
